{{ define "upstream" }}
    {{ if .Address }}
        {{/* If we got the containers from swarm and this container's port is published to host, use host IP:PORT */}}
        {{ if and .Container.Node.ID .Address.HostPort }}
            # {{ .Container.Node.Name }}/{{ .Container.Name }}
            server {{ .Container.Node.Address.IP }}:{{ .Address.HostPort }};
        {{/* If there is no swarm node or the port is not published on host, use container's IP:PORT */}}
        {{ else }}
            # {{ .Container.Name }}
            server {{ .Address.IP }}:{{ .Address.Port }};
        {{ end }}
    {{ else }}
        # {{ .Container.Name }}
        server {{ .Container.IP }} down;
    {{ end }}
{{ end }}


# If we receive X-Forwarded-Proto, pass it through; otherwise, pass along the
# scheme used to connect to this server
map $http_x_forwarded_proto $proxy_x_forwarded_proto {
  default $http_x_forwarded_proto;
  ''      $scheme;
}


# If we receive Upgrade, set Connection to "upgrade"; otherwise, delete any
# Connection header that may have been passed to this server
map $http_upgrade $proxy_connection {
  default upgrade;
  '' close;
}

log_format vhost '$host $remote_addr - $remote_user [$time_local] '
                 '"$request" $status $body_bytes_sent '
                 '"$http_referer" "$http_user_agent"';

access_log off;

server {
    server_name _; # This is just an invalid value which will never trigger on a real hostname.
    listen 80 deferred;
    listen [::]:80 deferred;
    access_log /var/log/nginx/access.log vhost;
    return 503;
}

{{ range $host, $containers := groupByMulti $ "Env.VIRTUAL_HOST" "," }}

upstream {{ $host }} {

{{ range $index, $value := $containers }}

    {{ $addrLen := len $value.Addresses }}
    {{/* If only 1 port exposed, use that */}}
    {{ if eq $addrLen 1 }}
        {{ with $address := index $value.Addresses 0 }}
           # {{$value.Name}}
           server {{ $address.IP }}:{{ $address.Port }};
        {{ end }}

    {{/* If a VIRTUAL_NETWORK is specified use use its IP */}}
    {{ else if $value.Env.VIRTUAL_NETWORK }}
        {{ range $i, $network := $value.Networks }}
           {{ if eq $network.Name $value.Env.VIRTUAL_NETWORK }}
   # Container: {{$value.Name}}@{{$network.Name}}
   server {{ $network.IP }}:{{ $value.Env.VIRTUAL_PORT }};
           {{ end }}
        {{ end }}

    {{/* If more than one port exposed, use the one matching VIRTUAL_PORT env var */}}
    {{ else if $value.Env.VIRTUAL_PORT }}
        {{ range $i, $address := $value.Addresses }}
           {{ if eq $address.Port $value.Env.VIRTUAL_PORT }}
           # {{$value.Name}}
           server {{ $address.IP }}:{{ $address.Port }};
           {{ end }}
        {{ end }}

    {{/* Else default to standard web port 80 */}}
    {{ else }}
        {{ range $i, $address := $value.Addresses }}
            {{ if eq $address.Port "80" }}
            # {{$value.Name}}
            server {{ $address.IP }}:{{ $address.Port }};
            {{ end }}
        {{ end }}
    {{ end }}
{{ end }}
}

{{ $default_host := or ($.Env.DEFAULT_HOST) "" }}
{{ $default_server := index (dict $host "" $default_host "default_server") $host }}

{{/* Get the VIRTUAL_PROTO defined by containers w/ the same vhost, falling back to "http" */}}
{{ $proto := or (first (groupByKeys $containers "Env.VIRTUAL_PROTO")) "http" }}

{{/* Get the first cert name defined by containers w/ the same vhost */}}
{{ $certName := (first (groupByKeys $containers "Env.CERT_NAME")) }}

{{/* Get the best matching cert  by name for the vhost. */}}
{{ $vhostCert := (closest (dir "/etc/nginx/certs") (printf "%s.crt" $host))}}

{{/* vhostCert is actually a filename so remove any suffixes since they are added later */}}
{{ $vhostCert := replace $vhostCert ".crt" "" -1 }}
{{ $vhostCert := replace $vhostCert ".key" "" -1 }}

{{/* Use the cert specifid on the container or fallback to the best vhost match */}}
{{ $cert := (coalesce $certName $vhostCert) }}

{{/* Get the CERT_AUTH defined by containers w/ the same vhost */}}
{{ $ca := or (first (groupByKeys $containers "Env.CERT_AUTH")) -1 }}

{{/* www or no-www */}}
{{ $www := or (first (groupByKeys $containers "Env.WWW")) -1 }}

{{ if (and (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert))) }}

server {
    server_name {{ $host }};
    listen 80 {{ $default_server }};
    listen [::]:80 {{ $default_server }};
    access_log /var/log/nginx/access.log vhost;
    return 301 https://$host$request_uri;
}

server {
    server_name {{ $host }};
    listen 443 ssl http2 {{ $default_server }};
    listen [::]:443 ssl http2 {{ $default_server }};
    access_log /var/log/nginx/access.log vhost;

    include /etc/nginx/boilerplate/enable/ssl.conf;

    ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
    ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }};

    {{ if (exists (printf "/etc/nginx/certs/ca/%s.pem" $ca)) }}
    include /etc/nginx/boilerplate/enable/ssl-stapling.conf;
    ssl_trusted_certificate {{ (printf "/etc/nginx/certs/ca/%s.pem" $ca) }};
    {{ end }}

    {{ if (exists (printf "/etc/nginx/certs/%s.dhparam.pem" $cert)) }}
    ssl_dhparam {{ printf "/etc/nginx/certs/%s.dhparam.pem" $cert }};
    {{ else if (exists ("/etc/nginx/certs/dhparam.pem")) }}
    ssl_dhparam /etc/nginx/certs/dhparam.pem;
    {{ end }}

    {{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
    include {{ printf "/etc/nginx/vhost.d/%s" $host }};
    {{ else if (exists "/etc/nginx/vhost.d/default") }}
    include /etc/nginx/vhost.d/default;
    {{ end }}

    location / {
        proxy_pass {{ trim $proto }}://{{ trim $host }};
        {{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
        auth_basic  "Restricted {{ $host }}";
        auth_basic_user_file    {{ (printf "/etc/nginx/htpasswd/%s" $host) }};
        {{ end }}

        {{ if (exists (printf "/etc/nginx/vhost.d/%s_location" $host)) }}
        include {{ printf "/etc/nginx/vhost.d/%s_location" $host}};
        {{ else if (exists "/etc/nginx/vhost.d/default_location") }}
        include /etc/nginx/vhost.d/default_location;
        {{ end }}

        include /etc/nginx/proxy.conf;
    }
}

{{ if (eq $www "no-www") }}

server {
    server_name www.{{ $host }};
    listen 80 {{ $default_server }};
    listen [::]:80 {{ $default_server }};
    access_log /var/log/nginx/access.log vhost;
    return 301 https://{{$host}}$request_uri;
}

server {
    server_name www.{{ $host }};
    listen 443 ssl http2 {{ $default_server }};
    listen [::]:443 ssl http2 {{ $default_server }};
    access_log /var/log/nginx/access.log vhost;

    include /etc/nginx/boilerplate/enable/ssl.conf;

    ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
    ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }};

    {{ if (exists (printf "/etc/nginx/certs/ca/%s.pem" $ca)) }}
    include /etc/nginx/boilerplate/enable/ssl-stapling.conf;
    ssl_trusted_certificate {{ (printf "/etc/nginx/certs/ca/%s.pem" $ca) }};
    {{ end }}

    {{ if (exists (printf "/etc/nginx/certs/%s.dhparam.pem" $cert)) }}
    ssl_dhparam {{ printf "/etc/nginx/certs/%s.dhparam.pem" $cert }};
    {{ else if (exists ("/etc/nginx/certs/dhparam.pem")) }}
    ssl_dhparam /etc/nginx/certs/dhparam.pem;
    {{ end }}

    return 301 https://{{$host}}$request_uri;
}

{{ else if (eq $www "www") }}

{{ $nowwwhost := replace $host "www." "" -1 }}

server {
    server_name {{ $nowwwhost }};
    listen 80 {{ $default_server }};
    listen [::]:80 {{ $default_server }};
    access_log /var/log/nginx/access.log vhost;
    return 301 https://{{$host}}$request_uri;
}

server {
    server_name {{ $nowwwhost }};
    listen 443 ssl http2 {{ $default_server }};
    listen [::]:443 ssl http2 {{ $default_server }};
    access_log /var/log/nginx/access.log vhost;

    include /etc/nginx/boilerplate/enable/ssl.conf;

    ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
    ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }};

    {{ if (exists (printf "/etc/nginx/certs/ca/%s.pem" $ca)) }}
    include /etc/nginx/boilerplate/enable/ssl-stapling.conf;
    ssl_trusted_certificate {{ (printf "/etc/nginx/certs/ca/%s.pem" $ca) }};
    {{ end }}

    {{ if (exists (printf "/etc/nginx/certs/%s.dhparam.pem" $cert)) }}
    ssl_dhparam {{ printf "/etc/nginx/certs/%s.dhparam.pem" $cert }};
    {{ else if (exists ("/etc/nginx/certs/dhparam.pem")) }}
    ssl_dhparam /etc/nginx/certs/dhparam.pem;
    {{ end }}

    return 301 https://{{$host}}$request_uri;
}

{{ end }}

{{ else }}

server {
    server_name {{ $host }};
    listen 80 {{ $default_server }};
    listen [::]:80 {{ $default_server }};
    access_log /var/log/nginx/access.log vhost;

    {{ if (exists (printf "/etc/nginx/vhost.d/%s" $host)) }}
    include {{ printf "/etc/nginx/vhost.d/%s" $host }};
    {{ else if (exists "/etc/nginx/vhost.d/default") }}
    include /etc/nginx/vhost.d/default;
    {{ end }}

    location / {
        proxy_pass {{ trim $proto }}://{{ trim $host }};
        {{ if (exists (printf "/etc/nginx/htpasswd/%s" $host)) }}
        auth_basic  "Restricted {{ $host }}";
        auth_basic_user_file    {{ (printf "/etc/nginx/htpasswd/%s" $host) }};
        {{ end }}

        {{ if (exists (printf "/etc/nginx/vhost.d/%s_location" $host)) }}
        include {{ printf "/etc/nginx/vhost.d/%s_location" $host}};
        {{ else if (exists "/etc/nginx/vhost.d/default_location") }}
        include /etc/nginx/vhost.d/default_location;
        {{ end }}

        include /etc/nginx/proxy.conf;
    }
}

{{ if (and (exists "/etc/nginx/certs/default.crt") (exists "/etc/nginx/certs/default.key")) }}
server {
    server_name {{ $host }};
    listen 443 ssl http2 {{ $default_server }};
    listen [::]:443 ssl http2 {{ $default_server }};
    access_log /var/log/nginx/access.log vhost;
    return 503;

    ssl_certificate /etc/nginx/certs/default.crt;
    ssl_certificate_key /etc/nginx/certs/default.key;
}
{{ end }}

{{ end }}
{{ end }}

{{/* Other domain redirections */}}
{{ range $redirect_from, $containers := groupByMulti $ "Env.REDIRECT_FROM_HOST" "," }}
{{ $redirect_to := or (first (groupByKeys $containers "Env.REDIRECT_TO_HOST")) -1 }}

{{/* HTTPS? */}}
{{ $cert := (closest (dir "/etc/nginx/certs") (printf "%s.crt" $redirect_from))}}
{{ $cert := replace $cert ".crt" "" -1 }}
{{ $cert := replace $cert ".key" "" -1 }}
{{ if (and (ne $cert "") (exists (printf "/etc/nginx/certs/%s.crt" $cert)) (exists (printf "/etc/nginx/certs/%s.key" $cert))) }}

server {
    server_name {{ $redirect_from }};
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    access_log /var/log/nginx/access.log vhost;

    include /etc/nginx/boilerplate/enable/ssl.conf;

    ssl_certificate /etc/nginx/certs/{{ (printf "%s.crt" $cert) }};
    ssl_certificate_key /etc/nginx/certs/{{ (printf "%s.key" $cert) }};

    {{ if (exists (printf "/etc/nginx/certs/%s.dhparam.pem" $cert)) }}
    ssl_dhparam {{ printf "/etc/nginx/certs/%s.dhparam.pem" $cert }};
    {{ else if (exists ("/etc/nginx/certs/dhparam.pem")) }}
    ssl_dhparam /etc/nginx/certs/dhparam.pem;
    {{ end }}

    return 301 https://{{$redirect_to}}$request_uri;
}

{{ end }}

server {
    server_name {{ $redirect_from }};
    listen 80;
    listen [::]:80;
    access_log /var/log/nginx/access.log vhost;
    return 301 https://{{$redirect_to}}$request_uri;
}

{{ end }}
