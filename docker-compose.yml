version: '2'
services:
  base:
    build:
      context: .
      dockerfile: docker/jiksnu-base/Dockerfile
    image: jiksnu-base
  ruby-base:
    build:
      context: .
      dockerfile: docker/jiksnu-ruby-base/Dockerfile
    image: jiksnu-ruby-base
  dockerui:
    image: microbox/dockerui
    depends_on:
      - proxy
    ports:
      - "9000:9000"
    environment:
      VIRTUAL_HOST: dockerui.localtest.me
    volumes:
      - /var/run/docker.sock:/docker.sock
    # networks:
    #   - frontend
    #   - backend
  # drone:
  #   image: drone/drone
  #   env_file:
  #     - /etc/drone/dronerc
  #   environment:
  #     VIRTUAL_PORT: drone.localtest.me
  #   volumes:
  #     - "/var/lib/docker:/var/lib/docker"
  #     - "/var/run/docker.sock:/var/run/docker.sock"
  #   networks:
  #     - backend
  elk:
    image: sebp/elk
    environment:
      LOGSPOUT: ignore
      VIRTUAL_HOST: elk.localtest.me
      VIRTUAL_PORT: 5601
    depends_on:
      - proxy
      - logspout
    # networks:
    #   - backend
    volumes:
      - "./docker/elk/01-lumberjack-input.conf:/etc/logstash/conf.d/01-lumberjack-input.conf"
      - "./docker/elk/02-beats-input.conf:/etc/logstash/conf.d/02-beats-input.conf"
  # etcd:
  #   image: microbox/etcd
  #   command: "--name jiksnu -data-dir=/data"
  #   depends_on:
  #     - redis
  #   ports:
  #     - "4001:4001"
  #     - "7001:7001"
  #   links:
  #     - redis
  #   volumes:
  #     - etcd-data:/data
  #   networks:
  #     - backend
  grafana:
    image: kamon/grafana_graphite:latest
    environment:
      VIRTUAL_HOST: grafana.localtest.me
    depends_on:
      - proxy
    # networks:
    #   - backend
    volumes:
      - ./data/whisper:/opt/graphite/storage/whisper
      - ./data/elasticsearch:/var/lib/elasticsearch
      - ./data/grafana:/opt/grafana/data
      - ./data/logs/graphite:/opt/graphite/storage/log
      - ./data/logs/elasticsearch:/var/log/elasticsearch
  karma:
    build:
      dockerfile: docker/karma/Dockerfile
      context: .
    image: jiksnu-karma
    depends_on:
      - proxy
      - elk
    environment:
      NOTIFY_SEND_URL: http://172.17.0.1:12345
      VIRTUAL_HOST: karma.localtest.me
      VIRTUAL_PORT: 9876
    ports:
      - "35729:35729"
    # networks:
    #   - backend
    volumes:
      - .:/app
  logspout:
    image: duck1123/logspout
    build:
      context: docker/logspout
    environment:
      VIRTUAL_HOST: logspout.localtest.me
      ROUTE_URIS: logstash://elk:5000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    # networks:
    #   - backend
  mongo:
    image: mongo
    volumes:
      - mongo-data:/data/db
    # networks:
    #   - backend
  mongoexpress:
    image: knickers/mongo-express
    depends_on:
      - mongo
      - proxy
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: "admin"
      ME_CONFIG_BASICAUTH_PASSWORD: "admin"
      VIRTUAL_HOST: mongo.localtest.me
    # networks:
    #   - backend
  mysql:
    image: mysql
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "true"
    # networks:
    #   - backend
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      VIRTUAL_HOST: phpmyadmin.localtest.me
      PMA_HOST: mysql
    depends_on:
      - mysql
      - proxy
    # networks:
    #   - backend
  proxy:
    image: rckrdstrgrd/nginx-proxy
    ports:
      - "80:80"
    volumes:
      - "./data/nginx/conf.d:/etc/nginx/conf.d"
      - "./data/nginx/vhost.d:/etc/nginx/vhost.d"
      - "./data/nginx/certs:/etc/nginx/certs:ro"
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
    # networks:
    #   - frontend
    #   - backend
  postgresdb:
    image: postgres:9.4
    volumes:
      - postgres-data:/var/lib/postgresql/data
    # networks:
    #   - backend
  redis:
    image: redis:3
    # networks:
    #   - backend
  redis_commander:
    image: tenstartups/redis-commander
    command: --redis-host redis
    depends_on:
      - redis
      - proxy
    environment:
      VIRTUAL_HOST: redis-commander.localtest.me
    # networks:
    #   - backend
  sentry:
    image: slafs/sentry
    depends_on:
      - postgresdb
      - redis
      - sentry_worker
      - proxy
    env_file: docker/sentry/environment
    environment:
      VIRTUAL_HOST: sentry.localtest.me
    # networks:
    #   - backend
    volumes:
      - sentry-files:/data
  sentry_worker:
    image: slafs/sentry
    command: celery worker -B
    depends_on:
      - postgresdb
      - redis
    env_file: docker/sentry/environment
    environment:
      C_FORCE_ROOT: "true"
    # networks:
    #   - backend
    volumes:
      - sentry-files:/data
  web:
    build: .
    image: jiksnu
    depends_on:
      - mongo
      - proxy
    environment:
      JIKSNU_DB_URL: "mongodb://mongo/jiksnu_docker"
      VIRTUAL_HOST: jiksnu.localtest.me
    volumes:
      - maven-repo:/root/.m2
    # networks:
    #   - backend
  web-dev:
    build:
      context: .
      dockerfile: docker/web-dev/Dockerfile
    image: jiksnu-dev
    depends_on:
      - mongo
      - proxy
    environment:
      JIKSNU_DB_URL: "mongodb://mongo/jiksnu_docker"
      HTTP_PORT: "80"
      VIRTUAL_HOST: jiksnu.localtest.me
    volumes:
      - maven-repo:/root/.m2
      - .:/app
    # networks:
    #   - backend
volumes:
  etcd-data:
    driver: local
  maven-repo:
    driver: local
  mongo-data:
    driver: local
  postgres-data:
    driver: local
  sentry-files:
    driver: local
# networks:
#   frontend:
#     # driver: bridge
#     external:
#       name: bridge
#   backend:
#     driver: bridge
