version: '2'
services:
  dockerui:
    image: microbox/dockerui
    # command: "-e http://dockerui.localtest.me"
    ports:
      - "9000:9000"
    environment:
      VIRTUAL_HOST: dockerui.localtest.me
      VIRTUAL_NETWORK: nginx-proxy
    volumes:
      - /var/run/docker.sock:/docker.sock
    networks:
      - frontend
      - backend
    # expose:
    #   - "9000"
  drone:
    image: drone/drone
    env_file:
      - /etc/drone/dronerc
    environment:
      VIRTUAL_PORT: drone.localtest.me
    volumes:
      - "/var/lib/docker:/var/lib/docker"
      - "/var/run/docker.sock:/var/run/docker.sock"
    networks:
      - backend
  elk:
    image: sebp/elk
    environment:
      VIRTUAL_HOST: elk.localtest.me
      VIRTUAL_PORT: 5601
    # ports:
    #   - "5601:5601"
    #   - "9200:9200"
    #   - "5044:5044"
    #   - "5000:5000"
    networks:
      # - frontend
      - backend
    volumes:
      # - "./logstash.conf:/etc/logstash/conf.d/07-redis.conf"
      - "./02-beats-input.conf:/etc/logstash/conf.d/02-beats-input.conf"
  etcd:
    image: microbox/etcd
    command: "--name jiksnu -data-dir=/data"
    depends_on:
      - redis
    ports:
      - "4001:4001"
      - "7001:7001"
    links:
      - redis
    volumes:
      - etcd-data:/data
    networks:
      - backend
  kamon:
    image: kamon/grafana_graphite:latest
    environment:
      VIRTUAL_HOST: kamon.localtest.me
    networks:
      - backend
    volumes:
      - ./data/whisper:/opt/graphite/storage/whisper
      - ./data/elasticsearch:/var/lib/elasticsearch
      - ./data/grafana:/opt/grafana/data
      - ./log/graphite:/opt/graphite/storage/log
      - ./log/elasticsearch:/var/log/elasticsearch
  logspout:
    image: rtoma/logspout-redis-logstash:0.1.1
    command: 'redis://redis'
    depends_on:
      - redis
    environment:
      Debug: 'true'
      REDIS_KEY: 'logstash'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - backend
  memcached:
    image: memcached
    networks:
      - backend
  mongo:
    image: mongo
    volumes:
      - mongo-data:/data/db
    networks:
      - backend
  mongoexpress:
    image: knickers/mongo-express
    depends_on:
      - mongo
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: "admin"
      ME_CONFIG_BASICAUTH_PASSWORD: "admin"
      VIRTUAL_HOST: mongo.localtest.me
      VIRTUAL_NETWORK: nginx-proxy
    networks:
      - backend
  mysql:
    image: mysql
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "true"
    networks:
      - backend
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    environment:
      VIRTUAL_HOST: phpmyadmin.localtest.me
      PMA_HOST: mysql
      # PMA_USER: admin
      # PMA_PASSWORD: admin
    depends_on:
      - mysql
    networks:
      - backend
  proxy:
    image: rckrdstrgrd/nginx-proxy
    ports:
      - "80:80"
    volumes:
      - "./volumes/conf.d:/etc/nginx/conf.d"
      - "./volumes/vhost.d:/etc/nginx/vhost.d"
      - "./volumes/certs:/etc/nginx/certs:ro"
      - "/var/run/docker.sock:/tmp/docker.sock:ro"
    networks:
      - frontend
      - backend
  postgresdb:
    image: postgres:9.4
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - backend
  redis:
    image: redis:3
    ports:
      - "6379:6379"
    networks:
      - backend
  redis_commander:
    image: tenstartups/redis-commander
    command: --redis-host redis
    environment:
      VIRTUAL_HOST: redis-commander.localtest.me
    ports:
      - "8081:8081"
    networks:
      - frontend
      - backend
  sentry:
    image: slafs/sentry
    depends_on:
      - postgresdb
      - redis
      - sentry_worker
    env_file: environment
    environment:
      VIRTUAL_HOST: sentry.localtest.me
    links:
      - postgresdb
      - redis
      - sentry_worker
    networks:
      - backend
    # ports:
    #   - "0.0.0.0:9000:9000"
    volumes:
      - sentry-files:/data
  sentry_worker:
    image: slafs/sentry
    command: celery worker -B
    depends_on:
      - postgresdb
      - redis
    env_file: environment
    environment:
      C_FORCE_ROOT: "true"
    links:
      - postgresdb:postgresdb
      - redis:redis
    networks:
      - backend
    volumes:
      - sentry-files:/data
  web:
    build: .
    image: jiksnu
    depends_on:
      - mongo
    environment:
      JIKSNU_DB_URL: "mongodb://mongo/jiksnu_docker"
      VIRTUAL_HOST: jiksnu.localtest.me
      VIRTUAL_NETWORK: nginx-proxy
    # extra_hosts:
    #   - "artifactory.jiksnu.org:173.255.231.160"
    volumes:
      - maven-repo:/root/.m2
    networks:
      - backend
volumes:
  etcd-data:
    driver: local
  maven-repo:
    driver: local
  mongo-data:
    driver: local
  postgres-data:
    driver: local
  sentry-files:
    driver: local
networks:
  # proxy-tier:
  frontend:
    # driver: bridge
    external:
      name: nginx-proxy
    # external:
    #   name: host
  backend:
    driver: bridge
