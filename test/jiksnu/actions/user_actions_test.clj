(ns jiksnu.actions.user-actions-test
  (:use (ciste [core :only [with-context]]
               [debug :only [spy]])
        (ciste.sections [default :only [show-section]])
        (clj-factory [core :only [factory fseq]])
        midje.sweet
        (jiksnu [test-helper :only [test-environment-fixture]])
        jiksnu.actions.user-actions)
  (:require (ciste [model :as cm])
            (jiksnu [model :as model])
            (jiksnu.model [domain :as model.domain]
                          [user :as model.user]))
  (:import jiksnu.model.Domain
           jiksnu.model.User
           org.apache.abdera2.model.Person))

(test-environment-fixture

 (fact "#'get-domain"
   (fact "when the domain already exists"

     (let [domain (model.domain/create (factory Domain))]

       (fact "when the domain is specified"
         (let [response (get-domain {:domain (:_id domain)})]
           response => (partial instance? Domain)
           (:_id response) => (:_id domain)))

       (fact "when the domain is not specified"
         (fact "when there is an id"

           (fact "when it is a http url"
             (let [response (get-domain {:id (str "http://" (:_id domain) "/users/1")})]
               response => (partial instance? Domain)
               (:_id response) => (:_id domain)))

           (fact "when it is an acct uri"
             (let [response (get-domain {:id (str "acct:" (fseq :username) "@" (:_id domain))})]
               response => (partial instance? Domain)
               (:_id response) => (:_id domain))))))))

 (fact "#'create"
   (fact "when the params ar nil"
     (fact "should throw an exception"
       (create nil) => (throws RuntimeException))))


 (fact "#'person->user"
   (fact "when given a Person generated by show-section"
     (let [user (create (factory User))
           person (with-context [:http :atom] (show-section user))
           response (person->user person)]

       response => (partial instance? User)
       (:username response) => (:username user)
       (:id response) => (:id user)
       (:domain response) => (:domain user))))

 (fact "#'find-or-create-by-remote-id"
   ;; (provided
   ;;   (jiksnu.model.webfinger/fetch-host-meta anything) => "<XRD/>"
   ;;   )
   
   (let [username (fseq :username)]
     
     (future-fact "when given a http uri"
       (do (model/drop-all!)
           (let [domain (model.domain/create (factory Domain
                                                      {:links [{:rel "lrdd"
                                                                :template "http://example.com/xrd?uri={uri}"}]}))
                uri (str "http://" (:_id domain) "/user/1")
                response (find-or-create-by-remote-id {:id uri})]
             response => (partial instance? User))))

     (fact "when given an acct uri"
       (model/drop-all!)
       (let [domain (model.domain/create (factory Domain
                                                  {:links [{:rel "lrdd"
                                                            :template "http://example.com/xrd?uri={uri}"
                                                            }]}))
             uri (str "acct:" username "@" (:_id domain))
             response (find-or-create-by-remote-id {:id uri})]
         response => (partial instance? User)))
     ))
 )
